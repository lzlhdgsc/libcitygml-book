Address::country()  返回国家
Address::setCountry  设置国家
Address::locality()  返回坐标
Address::setLocality 设置坐标
Address::postalCode() 返回邮政编码
Address::setPostalCode 设置邮政编码
Address::thoroughfareName() 通道名
Address::setThoroughfareName 设置通道名
Address::thoroughfareNumber() 返回通道
Address::setThoroughfareNumber() 设置通道数量
Appearance::getType() 返回外观的类型
Appearance::getIsFront() 返回外观是否为前端
Appearance::toString() 返回外观类型和ID
<Material> Appearance::asMaterial()  返回空指针
<const Material> Appearance::asMaterial() 返回空指针
<Texture> Appearance::asTexture 返回空指针
<const Texture> Appearance::asTexture() 返回空指针
<GeoreferencedTexture> Appearance::asGeoreferencedTexture() 返回空指针
<const GeoreferencedTexture> Appearance::asGeoreferencedTexture()  返回空指针
Appearance::inTheme(const std::string& themeName) 返回是否主题名称在模型中出现
Appearance::addToTheme(std::string themeName) 将主题加入模型中
Appearance::getThemes()  返回模型主题
AppearanceManager::getAppearanceByID(const std::string& id) 找到与Id相符合的外观
AppearanceManager::getAllThemes() 返回vector类型的模型主题
AppearanceManager::addAppearanceTarget(AppearanceTarget* target)增添目标外观
AppearanceManager::addAppearance(std::shared_ptr<Appearance> appearance) 
增添外观
AppearanceManager::addTextureTargetDefinition(std::shared_ptr<TextureTargetDefinition> targetDef)增添纹理目标定义
AppearanceManager::addMaterialTargetDefinition(std::shared_ptr<MaterialTargetDefinition> targetDef)增添材料目标定义
void assignTargetDefinition(std::shared_ptr<T>& targetDef, const std::unordered_map<std::string, AppearanceTarget*>& targetMap, std::shared_ptr<CityGMLLogger>& logger) 模板类，根据目标定义确认ID，并判断该ID在目标树中是否存在
AppearanceManager::assignAppearancesToTargets()调用上述模板类，将外观的材料和文字的定义加入到目标树中
AppearanceManager::addThemesFrom(std::shared_ptr<Appearance> surfaceData)从外表数据中增添主题
AppearanceTarget::addTargetDefinition(std::shared_ptr<AppearanceTargetDefinition<Appearance> > targetDef) 将目标中的材料或纹理的定义加入到模型中
 AppearanceTarget::addTargetDefinition(std::shared_ptr<TextureTargetDefinition> targetDef)将目标中的纹理的定义加入到模型中
void AppearanceTarget::addTargetDefinition(std::shared_ptr<MaterialTargetDefinition> targetDef)
将目标中的材料的定义加入到模型中
AppearanceTarget::addTargetDefinitionsOf(const AppearanceTarget& other) 将整个传入的目标前后对应加入模型中
<MaterialTargetDefinition>  AppearanceTarget::getMaterialTargetDefinitionForTheme(const std::string& theme, bool front) 找到前或后端模型主材料的主题定义
<const MaterialTargetDefinition> AppearanceTarget::getMaterialTargetDefinitionForTheme(const std::string& theme, bool front) 找到前或后端模型主材料的主题定义
<TextureTargetDefinition> AppearanceTarget::getTextureTargetDefinitionForTheme(const std::string& theme, bool front) 找到前或后端模型主纹理的主题定义
<const TextureTargetDefinition> AppearanceTarget::getTextureTargetDefinitionForTheme(const std::string& theme, bool front) 找到前或后端模型主纹理的主题定义
AppearanceTarget::getTextureTargetDefinitions()将传入的模型前后纹理对应加入目标中
AppearanceTarget::getAllTextureThemes(bool front)返回模型前端或者后端所有的主题
AttributeValue::AttributeValue(...) 初始函数，可设置模型的初始值和初始类型
void AttributeValue::setType(AttributeType type)设置模型的类型
AttributeValue::getType() 返回模型类型
void AttributeValue::setValue(...) 设置模型值，根据值类型选择对应执行的函数
AttributeValue::asString() 返回模型的值，以字符串形式
AttributeValue::asDouble(double defaultValue) 返回模型的值，以双精度数形式
AttributeValue::asInteger(int defaultValue) 返回模型的值，以整数形式
operator<<(std::ostream& os, const AttributeValue& o) 返回模型的值的数据流
CityGMLFactory::createCityModel(const std::string& id) 新建城市模型，并返回城市模型ID
CityGMLFactory::createCityObject(const std::string& id, CityObject::CityObjectsType type) 新建城市模型 并返回CityObject指针
Geometry::GeometryType mapCityObjectsTypeToGeometryType(const CityObject::CityObjectsType& cityObjType) 根据类型参数返回对应类型的对象
CityGMLFactory::createGeometry(const std::string& id, const CityObject::CityObjectsType& cityObjType, unsigned int lod) 创建新的几何对象
CityGMLFactory::createPolygon(const std::string& id) 在模型内新建多面体，返回该多面体的指针
CityGMLFactory::createLineString(const std::string& id) 创建新的行字符串并返回其指针
CityGMLFactory::requestSharedPolygonForGeometry(Geometry* geom, const std::string& polygonId) 执行该对象对应的request函数
CityGMLFactory::shareGeometry(Geometry* geom) 将该指针内容加入到该模型中并返回模型内的地理指针
CityGMLFactory::requestSharedGeometryWithID(ImplicitGeometry* implicitGeom, const std::string& id)执行该对象对应的request函数 
CityGMLFactory::createTexture(const std::string& id) 根据id对应的字符串创建文本属性并将其加入模型中
CityGMLFactory::createMaterial(const std::string& id) 根据id对应的字符串创建材料属性并将其加入模型中
CityGMLFactory::createGeoReferencedTexture(const std::string& id) 根据id对应的字符串创建几何参考属性并将其加入模型中
CityGMLFactory::createMaterialTargetDefinition(const std::string& targetID, std::shared_ptr<Material> appearance, const std::string& id) 根据id对应的字符串创建目标材料属性并将其加入模型中
CityGMLFactory::getAppearanceWithID(const std::string& id) 根据ID返回外观
CityGMLFactory::getAllThemes() 返回模型所有主题
CityGMLFactory::closeFactory() 结束模型的操作
CityGMLFactory::appearanceTargetCreated(AppearanceTarget* obj) 根据目标外观将其加入模型
CityModel::addToCityObjectsMapRecursive(const CityObject* cityObj) 将某个模型对象整体加入另一个模型
CityModel::themes() 返回模型主题
CityModel::setThemes(std::vector<std::string> themes) 根据参数设置模型主题
CityModel::getAllCityObjectsOfType( CityObject::CityObjectsType type ） 根据类型返回所有该类型的对象
CityModel::getRootCityObjects() 返回所有的根对象
CityModel::addRootObject(CityObject* obj) 添加根对象
CityModel::getNumRootCityObjects() 返回根对象的数目
CityModel::getRootCityObject(int i) 返回第i-1个根对象
CityModel::finish(Tesselator& tesselator, bool optimize, std::shared_ptr<CityGMLLogger> logger) 将修改结果写入模型，完成修改操作
std::ostream& operator<<( std::ostream& out, const CityModel& model ) 打印根对象
CityObject::CityObjectsType CityObject::getType() 返回模型类型
CityObject::getTypeAsString() 将模型类型转换为字符串后返回
CityObject::getGeometriesCount() 返回几何数目
CityObject::getGeometry(unsigned int i) 返回第i-1个几何对象
CityObject::addGeometry(Geometry* geom) 增添几何对象
CityObject::getImplicitGeometryCount() 返回模糊几何数目
CityObject::getImplicitGeometry(unsigned int i) 回第i-1个模糊几何对象
CityObject::addImplictGeometry(ImplicitGeometry* implictGeom) 增添模糊几何对象
CityObject::getChildCityObjectsCount() 返回子对象数目
CityObject::getChildCityObject(unsigned int i) 返回第i-1个子对象
CityObject::addChildCityObject(CityObject* cityObj) 增添子对象
Address* CityObject::address() 返回模型地址
CityObject::setAddress(std::unique_ptr<Address>&& address) 设置模型地址
CityObject::finish(Tesselator& tesselator, bool optimize, std::shared_ptr<CityGMLLogger> logger) 完成操作
operator<<( std::ostream& os, const CityObject& o ) 打印模型的包络和属性
Envelope::Envelope(）新建包络类并确定上下界
Envelope::Envelope(const std::string& srsName) 设置包络的名称
TVec3d& Envelope::getLowerBound() const 获得包络的下边界
Envelope::setLowerBound(const TVec3d& coordinate) 设置包络的下边界
Vec3d& Envelope::getUpperBound() 获得包络的上边界
Envelope::setUpperBound(const TVec3d& coordinate) 设置包络的上边界
Envelope::srsName()  返回名称
Envelope::validBounds()  判断包络是否合法
operator<<( std::ostream& os, const Envelope& e ) 打印包络边界
eatureObject::FeatureObject(const std::string& gmlID) 设置相应包络
FeatureObject::getEnvelope() 返回功能对象的包络
FeatureObject::setEnvelope(Envelope* e) 设置模型的包络
Geometry::getLOD() 返回模型的多层次细节
Geometry::getPolygonsCount() 返回多面体数量
Geometry::getPolygon(unsigned int i) 返回第i-1个多面体
Geometry::getLineStringCount() 返回行字符串数
Geometry::getLineString(unsigned int i) 返回第i-1个行字符串数
Geometry::getGeometriesCount() 返回几何数量
Geometry::getGeometry(unsigned int i) 返回第i-1个几何属性
Geometry::addGeometry(Geometry* geom) 增添几何对象
Geometry::getType() 返回模型类型
Geometry::getTypeAsString() 返回字符串类模型类型
Geometry::lod() 返回模型的多层次细节
Geometry::setLod(unsigned int lod) 设置模型的多层次细节
Geometry::addPolygon( std::shared_ptr<Polygon> p ) 将多面体加入到模型中
Geometry::addLineString(std::shared_ptr<LineString> l) 将行字符串加入到模型中
Geometry::finish(Tesselator& tesselator, bool optimize, std::shared_ptr<CityGMLLogger> logger) 完成操作
operator<<( std::ostream& os, const citygml::Geometry& s ) 打印模型的多面体
GeometryManager::GeometryManager(std::shared_ptr<CityGMLLogger> logger) 设置标签
GeometryManager::addSharedGeometry(std::shared_ptr<Geometry> geom) 增添新的共享几何
GeometryManager::requestSharedGeometryForImplicitGeometry(ImplicitGeometry* geom, const std::string& geometryID) 增添新的模糊几何
GeometryManager::finish() 完成操作并清空部分资源
GeoreferencedTexture::getPreferWorldFile() 返回是否采用参考值
GeoreferencedTexture::setPreferWorldFile(bool value) 设置是否采用参考值
GeoreferencedTexture::asTexture() 返回共享指针
GeoreferencedTexture::asGeoreferencedTexture 返回共享指针
ImplicitGeometry::setTransformMatrix(const TransformationMatrix matrix) 设置模型的矩阵
TransformationMatrix& ImplicitGeometry::getTransformMatrix() 返回模型的矩阵
ImplicitGeometry::setReferencePoint(const TVec3d& referencePoint) 设置模型的参考点
ImplicitGeometry::getReferencePoint() 返回模型的参考点
ImplicitGeometry::addGeometry(std::shared_ptr<Geometry> geom) 增添模型的几何对象
ImplicitGeometry::getGeometriesCount()  返回模型的几何对象数目
ImplicitGeometry::getGeometry(unsigned int i) 返回模型的第i-1个几何对象
ImplicitGeometry::getSRSName() 返回模型的名称
ImplicitGeometry::setSRSName 设置模型的名称
LinearRing::isExterior() 返回是否为外景
LinearRing::size(） 返回模型的顶点数量
LinearRing::addVertex(const TVec3d& v) 增添模型的顶点
LinearRing::computeNormal() 顶点正规化处理
LinearRing::getVertices 返回模型顶点
LinearRing::setVertices(std::vector<TVec3d> vertices) 设置模型的顶点
LinearRing::removeDuplicateVertices(const std::vector<TextureTargetDefinition*>& targets, std::shared_ptr<CityGMLLogger> logger )  移除多余的顶点并打印不匹配的顶点
LinearRing::forgetVertices() 清除顶点
citygml::LineString::LineString(const std::string& id)  创建行字符串对象，模型维度减一
citygml::LineString::getDimensions() 返回模型的维度
citygml::LineString::getVertices2D() 返回模型的2维顶点
citygml::LineString::getVertices3D() 返回模型的三维顶点
citygml::LineString::setVertices2D 设置模型的2维顶点
citygml::LineString::setVertices3D 设置模型的3维顶点
citygml::LineString::setDimension 设置模型维度
Material::Material(const std::string& id) : Appearance( id, "Material" ) 初始化材料对象，并设置默认值
Material::isSmooth() 材料是否光滑
Material::setIsSmooth(bool isSmooth) 设置材料是否光滑
Material::getDiffuse() 得到散射度
Material::setDiffuse(TVec3f diffuse) 设置散射度
Material::getEmissive() 得到发光度
aterial::setEmissive(TVec3f emissive) 设置材料的发光度
aterial::getSpecular() 得到材料的高光度
Material::setSpecular(TVec3f specular) 设置材料的高光度
Material::getAmbientIntensity() 得到周围亮度
Material::setAmbientIntensity(float intensity) 设置周围亮度
Material::getShininess() 得到反射度
Material::setShininess(float shininess) 设置反射度
Material::getTransparency() 得到透明度
Material::setTransparency(float transparancy) 设置透明度
Material::asMaterial() 返回材料对象的指针
Object::Object(const std::string& id) : 根据ID创建对象
std::string&Object::getId() 返回对象ID
Object::getAttribute(const std::string& name) 根据参数返回属性
Object::getAttributes()  返回对象的属性
Object::setAttribute(const std::string& name, const std::string& value, AttributeType type, bool overwrite) 根据参数设置指定属性
operator<<( std::ostream& os, const Object& o ) 打印对象ID
Polygon::Polygon(const std::string& id, std::shared_ptr<CityGMLLogger> logger)  创建多面体对象
std::vector<TVec3d>& Polygon::getVertices() 返回多面体定点
Polygon::getIndices() 返回多面体目录
Polygon::getMaterialFor(const std::string& theme, bool front)  根据主题和是否前后端货的目标的材料外观
Polygon::getTextureFor(const std::string& theme, bool front)  根据主题和是否前后端货的目标的纹理
Polygon::getTexCoordsForTheme(const std::string& theme, bool front)  根据主题和是否前后端货的目标的纹理坐标，没有的话打印错误
Polygon::computeNormal() 正规化计算
Polygon::negNormal() 返回是否正规化
Polygon::setNegNormal(bool negNormal) 设置是否正规化
Polygon::removeDuplicateVerticesInRings(std::shared_ptr<CityGMLLogger> logger) 在闭环内移除重复顶点
Polygon::getTexCoordsForRingAndTheme(const LinearRing& ring, const std::string& theme, bool front)  查找对应闭环内的纹理坐标
Polygon::getTexCoordListsForRing(const LinearRing& ring, const std::vector<std::string>& themesFront, const std::vector<std::string>& themesBack) 返回闭环内前端或后端的纹理坐标列表
Polygon::createIndicesWithTesselation(Tesselator& tesselator, std::shared_ptr<CityGMLLogger> logger) 根据镶嵌关系创建目录
Polygon::computeIndices(Tesselator& tesselator, std::shared_ptr<CityGMLLogger> logger ) 计算目录，判断多面体是否少于3个
Polygon::finish(Tesselator& tesselator, bool optimize, std::shared_ptr<CityGMLLogger> logger) 完成修改
Polygon::addRing( LinearRing* ring )  增加闭环
PolygonManager::addPolygon(std::shared_ptr<Polygon> poly) 添加多面体
PolygonManager::requestSharedPolygonForGeometry(Geometry* geom, const std::string& polygonID) 请求列表中添加该多面体
PolygonManager::finish() 完成修改
Tesselator::Tesselator(std::shared_ptr<citygml::CityGMLLogger> logger ) 创建镶嵌对象
Tesselator::init( const TVec3d& normal, GLenum winding_rule ) 镶嵌对象初始化
Tesselator::compute() 计算镶嵌关系
Tesselator::getVertices() 返回所有坐标
Tesselator::getIndices() 得到所有目录
Tesselator::setKeepVertices(bool value) 设置是否保留坐标
Tesselator::keepVertices() 返回是否保留坐标
Tesselator::addContour(const std::vector<TVec3d>& pts, std::vector<std::vector<TVec2f> > textureCoordinatesLists ) 根据参数增添轮廓属性并更新纹理坐标
Tesselator::beginCallback( GLenum which, void* userData ) 对用户数据初始回调
Tesselator::vertexDataCallback( GLvoid *data, void* userData ) 坐标数据回调
Tesselator::combineCallback( GLdouble coords[3], void* vertex_data[4], GLfloat weight[4], void** outData, void* userData ) 回调全部，包括坐标和目录
Tesselator::endCallback( void* userData ) 最终回调，完成修改
CALLBACK Tesselator::errorCallback( GLenum errorCode, void* userData ) 用于报错
Texture::getUrl()  返回纹理的资源定位符
Texture::setUrl(const std::string& url) 设置纹理的资源定位符
Texture::getRepeat() 返回纹理是否重复
Texture::getWrapMode() 返回纹理的围绕形式
Texture::setWrapMode(Texture::WrapMode mode) 设置纹理的围绕形式
Texture::setWrapModeFromString(std::string wrapMode) 根据字符串设置纹理的围绕形式
exture::getBorderColor() 返回纹理的边框颜色
Texture::setBorderColor(TVec4f color) 设置纹理的边框颜色
Texture::toString() 打印资源定位符
Texture::asTexture()  返回纹理对象的自身指针
TextureCoordinates::targets(const LinearRing& ring) 返回闭环内是否有目标
TextureCoordinates::eraseCoordinate(unsigned int i) 删除第i-1个纹理坐标
std::vector<TVec2f>& TextureCoordinates::getCoords() 返回纹理的坐标列表
TextureCoordinates::setCoords(std::vector<TVec2f> texCoords) 设置纹理的坐标
TextureTargetDefinition::getTextureCoordinatesCount() 返回目标纹理的数目
TextureTargetDefinition::getTextureCoordinates(unsigned int i) 返回第i-1个目标纹理
TextureTargetDefinition::getTextureCoordinatesForID(const std::string& ringID) 返回对应闭环内的目标纹理
TextureTargetDefinition::addTexCoordinates(std::shared_ptr<TextureCoordinates> texCoords) 增加目标纹理的坐标
TransformationMatrix::TransformationMatrix() 矩阵初始化，4*4
TransformationMatrix(double* matrix) 根据参数设置矩阵
TransformationMatrix::getMatrix() 返回矩阵
TransformationMatrix::getTransposedMatrix() 返回转置矩阵
