Address::country()  返回国家
Address::setCountry  设置国家
Address::locality()  返回坐标
Address::setLocality 设置坐标
Address::postalCode() 返回邮政编码
Address::setPostalCode 设置邮政编码
Address::thoroughfareName() 通道名
Address::setThoroughfareName 设置通道名
Address::thoroughfareNumber() 返回通道
Address::setThoroughfareNumber() 设置通道数量
Appearance::getType() 返回外观的类型
Appearance::getIsFront() 返回外观是否为前端
Appearance::toString() 返回外观类型和ID
<Material> Appearance::asMaterial()  返回空指针
<const Material> Appearance::asMaterial() 返回空指针
<Texture> Appearance::asTexture 返回空指针
<const Texture> Appearance::asTexture() 返回空指针
<GeoreferencedTexture> Appearance::asGeoreferencedTexture() 返回空指针
<const GeoreferencedTexture> Appearance::asGeoreferencedTexture()  返回空指针
Appearance::inTheme(const std::string& themeName) 返回是否主题名称在模型中出现
Appearance::addToTheme(std::string themeName) 将主题加入模型中
Appearance::getThemes()  返回模型主题
AppearanceManager::getAppearanceByID(const std::string& id) 找到与Id相符合的外观
AppearanceManager::getAllThemes() 返回vector类型的模型主题
AppearanceManager::addAppearanceTarget(AppearanceTarget* target)增添目标外观
AppearanceManager::addAppearance(std::shared_ptr<Appearance> appearance) 
增添外观
AppearanceManager::addTextureTargetDefinition(std::shared_ptr<TextureTargetDefinition> targetDef)增添文本目标定义
AppearanceManager::addMaterialTargetDefinition(std::shared_ptr<MaterialTargetDefinition> targetDef)增添材料目标定义
void assignTargetDefinition(std::shared_ptr<T>& targetDef, const std::unordered_map<std::string, AppearanceTarget*>& targetMap, std::shared_ptr<CityGMLLogger>& logger) 模板类，根据目标定义确认ID，并判断该ID在目标树中是否存在
AppearanceManager::assignAppearancesToTargets()调用上述模板类，将外观的材料和文字的定义加入到目标树中
AppearanceManager::addThemesFrom(std::shared_ptr<Appearance> surfaceData)从外表数据中增添主题
AppearanceTarget::addTargetDefinition(std::shared_ptr<AppearanceTargetDefinition<Appearance> > targetDef) 将目标中的材料或文本的定义加入到模型中
 AppearanceTarget::addTargetDefinition(std::shared_ptr<TextureTargetDefinition> targetDef)将目标中的文本的定义加入到模型中
void AppearanceTarget::addTargetDefinition(std::shared_ptr<MaterialTargetDefinition> targetDef)
将目标中的材料的定义加入到模型中
AppearanceTarget::addTargetDefinitionsOf(const AppearanceTarget& other) 将整个传入的目标前后对应加入模型中
<MaterialTargetDefinition>  AppearanceTarget::getMaterialTargetDefinitionForTheme(const std::string& theme, bool front) 找到前或后端模型主材料的主题定义
<const MaterialTargetDefinition> AppearanceTarget::getMaterialTargetDefinitionForTheme(const std::string& theme, bool front) 找到前或后端模型主材料的主题定义
<TextureTargetDefinition> AppearanceTarget::getTextureTargetDefinitionForTheme(const std::string& theme, bool front) 找到前或后端模型主文本的主题定义
<const TextureTargetDefinition> AppearanceTarget::getTextureTargetDefinitionForTheme(const std::string& theme, bool front) 找到前或后端模型主文本的主题定义
AppearanceTarget::getTextureTargetDefinitions()将传入的模型前后文本对应加入目标中
AppearanceTarget::getAllTextureThemes(bool front)返回模型前端或者后端所有的主题
AttributeValue::AttributeValue(...) 初始函数，可设置模型的初始值和初始类型
void AttributeValue::setType(AttributeType type)设置模型的类型
AttributeValue::getType() 返回模型类型
void AttributeValue::setValue(...) 设置模型值，根据值类型选择对应执行的函数
AttributeValue::asString() 返回模型的值，以字符串形式
AttributeValue::asDouble(double defaultValue) 返回模型的值，以双精度数形式
AttributeValue::asInteger(int defaultValue) 返回模型的值，以整数形式
operator<<(std::ostream& os, const AttributeValue& o) 返回模型的值的数据流
CityGMLFactory::createCityModel(const std::string& id) 新建城市模型，并返回城市模型ID
CityGMLFactory::createCityObject(const std::string& id, CityObject::CityObjectsType type) 新建城市模型 并返回CityObject指针
Geometry::GeometryType mapCityObjectsTypeToGeometryType(const CityObject::CityObjectsType& cityObjType) 根据类型参数返回对应类型的对象
CityGMLFactory::createGeometry(const std::string& id, const CityObject::CityObjectsType& cityObjType, unsigned int lod) 创建新的地理对象
CityGMLFactory::createPolygon(const std::string& id) 在模型内新建多面体，返回该多面体的指针
CityGMLFactory::createLineString(const std::string& id) 创建新的行字符串并返回其指针
CityGMLFactory::requestSharedPolygonForGeometry(Geometry* geom, const std::string& polygonId) 执行该对象对应的request函数
CityGMLFactory::shareGeometry(Geometry* geom) 将该指针内容加入到该模型中并返回模型内的地理指针
CityGMLFactory::requestSharedGeometryWithID(ImplicitGeometry* implicitGeom, const std::string& id)执行该对象对应的request函数 
CityGMLFactory::createTexture(const std::string& id) 根据id对应的字符串创建文本属性并将其加入模型中
CityGMLFactory::createMaterial(const std::string& id) 根据id对应的字符串创建材料属性并将其加入模型中
CityGMLFactory::createGeoReferencedTexture(const std::string& id) 根据id对应的字符串创建地理参考属性并将其加入模型中
CityGMLFactory::createMaterialTargetDefinition(const std::string& targetID, std::shared_ptr<Material> appearance, const std::string& id) 根据id对应的字符串创建目标材料属性并将其加入模型中
CityGMLFactory::getAppearanceWithID(const std::string& id) 根据ID返回外观
CityGMLFactory::getAllThemes() 返回模型所有主题
CityGMLFactory::closeFactory() 结束模型的操作
CityGMLFactory::appearanceTargetCreated(AppearanceTarget* obj) 根据目标外观将其加入模型
CityModel::addToCityObjectsMapRecursive(const CityObject* cityObj) 将某个模型对象整体加入另一个模型
CityModel::themes() 返回模型主题
CityModel::setThemes(std::vector<std::string> themes) 根据参数设置模型主题
CityModel::getAllCityObjectsOfType( CityObject::CityObjectsType type ） 根据类型返回所有该类型的对象
CityModel::getRootCityObjects() 返回所有的根对象
CityModel::addRootObject(CityObject* obj) 添加根对象
CityModel::getNumRootCityObjects() 返回根对象的数目
CityModel::getRootCityObject(int i) 返回第i-1个根对象
CityModel::finish(Tesselator& tesselator, bool optimize, std::shared_ptr<CityGMLLogger> logger) 将修改结果写入模型，完成修改操作
std::ostream& operator<<( std::ostream& out, const CityModel& model ) 打印根对象
CityObject::CityObjectsType CityObject::getType() 返回模型类型
CityObject::getTypeAsString() 将模型类型转换为字符串后返回
CityObject::getGeometriesCount() 返回地理数目
CityObject::getGeometry(unsigned int i) 返回第i-1个地理对象
CityObject::addGeometry(Geometry* geom) 增添地理对象
CityObject::getImplicitGeometryCount() 返回模糊地理数目
CityObject::getImplicitGeometry(unsigned int i) 回第i-1个模糊地理对象
CityObject::addImplictGeometry(ImplicitGeometry* implictGeom) 增添模糊地理对象
CityObject::getChildCityObjectsCount() 返回子对象数目
CityObject::getChildCityObject(unsigned int i) 返回第i-1个子对象
CityObject::addChildCityObject(CityObject* cityObj) 增添子对象
Address* CityObject::address() 返回模型地址
CityObject::setAddress(std::unique_ptr<Address>&& address) 设置模型地址
CityObject::finish(Tesselator& tesselator, bool optimize, std::shared_ptr<CityGMLLogger> logger) 完成操作
operator<<( std::ostream& os, const CityObject& o ) 打印模型的包络和属性
